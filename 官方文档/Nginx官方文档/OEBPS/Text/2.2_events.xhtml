<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
  "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title></title>
  <link href="../Styles/Style.css" rel="stylesheet" type="text/css" />
  <link href="../Styles/code.css" rel="stylesheet" type="text/css" />
</head>

<body>
  <h2>Nginx事件模块</h2>

  <h3 class="sigil_not_in_toc">accept_mutex</h3>

  <p><b>Syntax:</b> <i>accept_mutex [ on | off ]</i></p>

  <p><b>Default:</b> <i>on</i></p>

  <p>nginx 使用连接互斥锁进行顺序的accept()系统调用.</p>

  <h3 class="sigil_not_in_toc">accept_mutex_delay</h3>

  <p><b>Syntax:</b> <i>accept_mutex_delay Nms;</i></p>

  <p><b>Default:</b> <i>500ms</i></p>

  <p>如果一个进程没有互斥锁，它将延迟至少多长时间。默认情况下，延迟是500ms 。</p>

  <p><br /></p>

  <h3 class="sigil_not_in_toc">debug_connection</h3>

  <p><b>Syntax:</b> <i>debug_connection [ip | CIDR]</i></p>

  <p><b>Default:</b> <i>none</i></p>

  <p>Since 0.3.54 this option support CIDR address format</p>

  <p>This option gives you the ability to write debug log only for the clients of this IP/NET.</p>

  <p>Several different directives are possible.</p>

  <p>Example:</p>
  <pre class="code"><span class="kw1">error_log</span> /var/log/nginx/errors;
<span class="kw2">events</span> <span class="br0">{</span>
  <span class="kw2">debug_connection</span>   <span class="nu0">192.168</span><span class="nu0">.1</span><span class="nu0">.1</span>;

<span class="br0">}</span></pre>

  <h3 class="sigil_not_in_toc">devpoll_changes</h3>

  <h3 class="sigil_not_in_toc">devpoll_events</h3>

  <h3 class="sigil_not_in_toc">kqueue_events</h3>

  <h3 class="sigil_not_in_toc">epoll_events</h3>

  <p><b>Syntax:</b> <i>devpoll_changes</i></p>

  <p><b>Default:</b></p>

  <p>These directives specify how many events may be passed to/from kernel, using appropriate method.</p>

  <p>The default <code>devpoll</code> values are 32, the rest are 512.</p>

  <h3 class="sigil_not_in_toc">multi_accept</h3>

  <p><b>Syntax:</b> <i>multi_accept [ on | off ]</i></p>

  <p><b>Default:</b> <i>off</i></p>

  <p><code>multi_accept</code> tries to accept() as many connections as possible after nginx gets notification about a new connection.</p>

  <p><br /></p>

  <p><br /></p>

  <h3 class="sigil_not_in_toc">rtsig_signo</h3>

  <p><b>Syntax:</b> <i>rtsig_signo</i></p>

  <p><b>Default:</b></p>

  <p>nginx uses two signals when the <code>rtsig</code> method is used. The directive specified the first signal number. The second is plus 1.</p>

  <p>By default <code>rtsig_signo</code> is SIGRTMIN+10 (40).</p>

  <p><br /></p>

  <h3 class="sigil_not_in_toc">rtsig_overflow_events</h3>

  <h3 class="sigil_not_in_toc">rtsig_overflow_test</h3>

  <h3 class="sigil_not_in_toc">rtsig_overflow_threshold</h3>

  <p><b>Syntax:</b> <i>rtsig_overflow_*</i></p>

  <p><b>Default:</b></p>

  <p>These directives specifies how to handle rtsig queue overflows. When overflow occurred nginx flushes rtsig queue, then it handles events switching between poll() and rtsig. poll() handles consecutively all unhandled events, while rtsig periodicaly drains queue to prevent a new overflow. When overflow is handled completely, nginx switches to rtsig method again.</p>

  <p>The rtsig_overflow_events specifies the number of events to be passed via poll(). The default is 16.</p>

  <p>The rtsig_overflow_test specifies after which number of events handled by poll() nginx will drains rtsig queue. The default is 32.</p>

  <p>The rtsig_overflow_threshold works in Linux 2.4.x only. Before to drain rtsig queue nginx looks in a kernel how the queue is filled up</p>

  <p>The default is 1/10. "rtsig_overflow_threshold 3" means 1/3.</p>

  <h3 class="sigil_not_in_toc">use</h3>

  <p><b>Syntax:</b> <i>use [ kqueue | rtsig | epoll | /dev/poll | select | poll | eventport ]</i></p>

  <p><b>Default:</b></p>

  <p><br />
  如果在<code>./configure</code>的时候指定了不止一种事件模型，那么可以设置其中一个，以便告诉nginx使用哪种事件模型。默认情况下nginx会在<code>./configure</code>时找出最适合系统的事件模型。</p>

  <p>你可以在 <a href="../general/optimizations.html" title="NginxOptimizations">这里</a> 查看可用的事件模型以及如何在<code>./configure</code>时激活</p>

  <h3 class="sigil_not_in_toc">worker_connections</h3>

  <p><b>Syntax:</b> <i>worker_connections number</i></p>

  <p><b>Default:</b></p>

  <p>通过worker_connections和worker_proceses可以计算出maxclients：</p>
  <pre>max_clients = worker_processes * worker_connections

</pre>

  <p>作为反向代理，max_clients为：</p>
  <pre>max_clients = worker_processes * worker_connections/4
</pre>

  <p>Since a browser opens 2 connections by default to a server and nginx uses the fds (file descriptors) from the same pool to connect to the upstream backend</p>

  <h3 class="sigil_not_in_toc">References</h3>
</body>
</html>
